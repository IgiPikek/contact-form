<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Contact Form</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <style>
        html {
            font-family: sans-serif;
        }
        .row {
            margin-bottom: 1em;
        }
        .entries {
            min-width: 400px;
        }
        .entry {
            margin: 1em 0;
            word-break: break-word;
        }
        .meta {
            font-size: .8rem;
            color: #444;
            line-break: anywhere;
        }
        .meta .msg-timestamp {
            cursor: pointer;
        }
        .reply-controls textarea {
            box-sizing: border-box;
            max-width: 100%;
        }
        .reply-controls .sending-indicator {
            margin-left: .5em;
            font-size: .8em;
            font-style: italic;
            color: #333;
        }
        img.attachment {
            max-width: 400px;
            max-height: 200px;
        }
        .attachment-controls button {
            margin-left: .5rem;
        }
        .attachment-description {
            font-size: .9em;
            font-style: italic;
            color: #333;
        }
        .message {
            white-space: pre-wrap;
            display: inline-block;
            padding: .2em .5em;
            border-radius: 2px;
            background-color: #bbc;
        }
        .message.self {
            background-color: #ddc;
        }
        .message.isLarge {
            font-size: .9em;
            font-style: italic;
        }
        section:nth-of-type(2n) {
            background-color: #eee;
        }

        @media screen and (min-width: 36em) {
            .convo-container {
                display: flex;
                align-items: flex-start;
            }
            .conversation-picker {
                width: 18em;
                flex-shrink: 0;
                margin-right: 1em;
            }
        }
        .convo-controls {
            margin-bottom: .5rem;
        }
        .convo-controls button {
            margin-right: .5rem;
        }
        .conversation-picker {
            border: 1px solid #000;
            box-sizing: border-box;
            font-family: sans-serif;
            margin-bottom: 1rem;
        }
        .conversation-picker .convo-item {
            position: relative;
            display: flex;
            height: 3.8em;
            cursor: pointer;
        }
        .conversation-picker .convo-item:hover {
            background-color: #ddc;
        }
        .conversation-picker .convo-item:not(:last-child) {
            border-bottom: 1px solid #000;
        }
        .conversation-picker .convo-item.selected {
            background-color: #0ff;
        }
        .conversation-picker .convo-item.selected:hover {
            background-color: #2dd;
        }
        .convo-item .avatar {
            height: 2.5em;
            width: 2.5em;
            flex-shrink: 0;
            flex-grow: 0;
            align-self: center;
            box-sizing: border-box;
            margin: .25em;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            text-shadow: 1px 1px #fff;
            /* Background color depends on convo ID and must be applied dynamically in HTML */
        }
        .convo-item .convo-preview {
            overflow: hidden;
            margin-right: .4em;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding-top: .4rem;
            padding-bottom: .3rem;
        }
        .convo-preview .convo-partner {
            font-size: .9em;
        }
        .convo-preview .convo-intertenant,
        .convo-preview .convo-entrypoint {
            font-size: .7em;
        }
        .convo-preview .convo-intertenant-tag {
            padding: 2px 4px;
            background-color: royalblue;
            color: white;
            border: 1px solid blue;
            border-radius: 2px;
        }
        .convo-preview .convo-entrypoint-tag {
            padding: 2px 4px;
            background-color: orange;
            border: 1px solid orangered;
            border-radius: 2px;
        }
        .convo-preview .last-message {
            font-size: .7em;
            font-style: italic;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .convo-item .convo-date {
            position: absolute;
            right: 0;
            padding: .4em;
            font-size: .8em;
            font-style: italic;
        }
    </style>

    <style>
        body {
        <%_ style.forEach(s => { _%>
            <%= s %>;
        <%_ }); _%>
        }
    </style>

    <% if (prod) { %>
    <script async src="/lib/sodium-plus.min.js"></script>
    <% } else { %>
    <script async src="/lib/sodium-plus.js"></script>
    <% } %>
</head>

<body>
<% if (!embedded) { %>
<h1>Contact form</h1>
<div>For: <%= tenant %></div>
<% } %>

<div id="app">
    <template v-if="state.currentPage === 'login'">
        <h2>{{texts.titleLogin}}</h2>

        <form v-if="state.loginStep === 0" @submit.prevent="toCaptcha">
            <p>{{texts.infoUserNamePW}}</p>
            <div>
                <input type="text" v-model="state.name" :placeholder="texts.inputUsername" required autofocus>  <!-- TODO maybe minlength -->
            </div>
            <div class="row">
                <input :type="state.pwType" v-model="state.pw" :placeholder="texts.inputPassphrase" required>  <!-- TODO minlength -->
                <button type="button" @click="togglePw">{{state.pwBtnText}}</button>
            </div>
            <button type="submit">{{texts.btnNext}}</button>
        </form>

        <form v-if="state.loginStep === 1" @submit.prevent="login">
            <div>{{texts.infoCalculate}}:</div>
            <div class="row">
                <img :src="'/' + state.tenantId + '/' + state.entrypoint + '/captcha?sid=' + sid" alt="Captcha" width="150" height="50" ref="imgCaptcha">
                <span> = </span>
                <input type="text" v-model="state.captcha" :readonly="state.loggingIn" ref="inpCaptcha" :placeholder="texts.inputResult" required>
            </div>
            <div v-if="state.loggingIn">{{texts.infoLoggingIn}}...</div>
            <button v-else type="submit">{{texts.btnLogIn}}</button>
        </form>

    </template>

    <template v-if="state.currentPage === 'messages' && state.admin">
        <h2>{{texts.titleAdminPage}}</h2>
        <div class="convo-container">
            <div>
                <div class="convo-controls">
                    <button @click="refreshList">{{texts.btnRefreshList}}</button>
                    <button @click="goToPage('settings')">{{texts.btnSettings}}</button>
                </div>
                <Conversation-Picker :convos="state.convos" @selection-changed="convoChanged"></Conversation-Picker>
            </div>
            <main v-if="state.selectedConvo">
                <div class="convo-controls">
                    <button @click="refresh">{{texts.btnRefreshConvo}}</button>
                </div>
                <Conversation :convo="state.selectedConvo"
                              @reply="sendResponse"
                              @get-message="getMessage"
                ></Conversation>
            </main>
        </div>
    </template>

    <template v-if="state.currentPage === 'messages' && !state.admin">
        <h2 v-if="<%= !embedded %>">{{texts.titleVisitorPage}}</h2>
        <p>{{texts.hello}} {{state.name}}.</p>
        <p><button @click="refresh">{{texts.btnRefreshConvo}}</button></p>

        <!-- threads, email style -->
        <template v-if="state.selectedConvo">
            <Conversation :convo="state.selectedConvo" @reply="sendResponse" @get-message="getMessage"></Conversation>
        </template>
    </template>

    <template v-if="state.currentPage === 'settings' && state.admin">
        <h2>{{texts.titleSettingsPage}}</h2>
        <button @click="goToPage('messages')">{{texts.btnBack}}</button>

        <h3>{{texts.labelEntryPoints}}</h3>
        <table>
            <tr v-for="ep in state.entrypoints">
                <td>{{ep}}</td>
                <td><button @click="deleteEntrypoint($event, ep)">{{texts.btnDelete}}</button></td>
            </tr>
            <tr>
                <td><input type="text" :placeholder="texts.inputNewEntryPoint"
                           pattern="[a-z\d_\-]+" required
                           v-model.trim="state.newEp"
                           @input="validateNewEntrypoint"
                           :disabled="state.waitingCreateEntrypoint"
                    ></td>
                <td><button @click="createEntrypoint(state.newEp)" :disabled="!state.newEntrypointValid || state.waitingCreateEntrypoint">{{texts.btnCreate}}</button></td>
            </tr>
        </table>

        <p v-if="state.instanceOwner">
            Client time: {{state.serverTimeSync.client}} - Server time: {{state.serverTimeSync.server}}
        </p>
    </template>
</div>


<%- include("components/_conversation"); %>
<%- include("components/_conversation-picker"); %>


<script type="module">
    <% if (prod) { %>
    import * as Vue from "/lib/vue.esm-browser.prod.js";
    <% } else { %>
    import * as Vue from "/lib/vue.esm-browser.js";
    <% } -%>

    import { getApp } from "/app.js";

    const app = await getApp(Vue, `<%= sid %>`);

    Vue.createApp(app).mount('#app');
</script>



</body>
</html>
