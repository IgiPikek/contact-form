<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Contact Form</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <style>
        html {
            font-family: sans-serif;
        }
        .row {
            margin-bottom: 1em;
        }
        .entries {
            min-width: 400px;
        }
        .entry {
            margin: 1em 0;
            word-break: break-word;
        }
        .meta {
            font-size: .8rem;
            color: #444;
        }
        .reply-controls textarea {
            box-sizing: border-box;
            max-width: 100%;
        }
        .message {
            white-space: pre-wrap;
            display: inline-block;
            padding: .2em .5em;
            border-radius: 2px;
            background-color: #bbc;
        }
        .message.self {
            background-color: #ddc;
        }
        section:nth-of-type(2n) {
            background-color: #eee;
        }

        .conversation-picker {
            width: 18em;
            border: 1px solid #000;
            box-sizing: border-box;
            font-family: sans-serif;
        }
        .conversation-picker .convo-item {
            position: relative;
            display: flex;
            height: 3.8em;
            cursor: pointer;
        }
        .conversation-picker .convo-item:hover {
            background-color: #ddc;
        }
        .conversation-picker .convo-item:not(:last-child) {
            border-bottom: 1px solid #000;
        }
        .conversation-picker .convo-item.selected {
            background-color: #0ff;
        }
        .conversation-picker .convo-item.selected:hover {
            background-color: #2dd;
        }
        .convo-item .avatar {
            height: 2.5em;
            width: 2.5em;
            flex-shrink: 0;
            flex-grow: 0;
            align-self: center;
            box-sizing: border-box;
            margin: .25em;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            text-shadow: 1px 1px #fff;
            /* Background color depends on convo ID and must be applied dynamically in HTML */
        }
        .convo-item .convo-preview {
            overflow: hidden;
            margin-right: .4em;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding-top: .4rem;
            padding-bottom: .3rem;
        }
        .convo-preview .convo-partner {
            font-size: .9em;
        }
        .convo-preview .convo-intertenant,
        .convo-preview .convo-entrypoint {
            font-size: .7em;
        }
        .convo-preview .convo-intertenant-tag {
            padding: 2px 4px;
            background-color: royalblue;
            color: white;
            border: 1px solid blue;
            border-radius: 2px;
        }
        .convo-preview .convo-entrypoint-tag {
            padding: 2px 4px;
            background-color: orange;
            border: 1px solid orangered;
            border-radius: 2px;
        }
        .convo-preview .last-message {
            font-size: .7em;
            font-style: italic;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .convo-item .convo-date {
            position: absolute;
            right: 0;
            padding: .4em;
            font-size: .8em;
            font-style: italic;
        }
    </style>

    <% if (prod) { %>
    <script async src="/lib/sodium-plus.min.js"></script>
    <% } else { %>
    <script async src="/lib/sodium-plus.js"></script>
    <% } %>
</head>

<body>
<h1>Contact form</h1>
<div>For: <%= tenant %></div>

<div id="app">
    <template v-if="state.currentPage === 'login'">
        <h2>Login</h2>

<!--        <form @submit.prevent="login">-->
        <form v-if="state.loginStep === 0" @submit.prevent="toCaptcha">
            <div>
                <input type="text" v-model="state.name" placeholder="Your name" required autofocus>  <!-- TODO maybe minlength -->
            </div>
            <div class="row">
                <input :type="state.pwType" v-model="state.pw" placeholder="Passphrase" required>  <!-- TODO minlength -->
                <button type="button" @click="togglePw">{{state.pwBtnText}}</button>
            </div>
            <button type="submit">Next</button>
        </form>

        <form v-if="state.loginStep === 1" @submit.prevent="login">
            <div>Calculate:</div>
            <div class="row">
                <img :src="'/' + state.tenantId + '/' + state.entrypoint + '/captcha?sid=' + sid" alt="Captcha" width="150" height="50" ref="imgCaptcha">
                <span> = </span>
                <input type="text" v-model="state.captcha" ref="inpCaptcha" placeholder="Result" required>
            </div>
            <button type="submit">Log in</button>
        </form>

    </template>

    <template v-if="state.currentPage === 'messages' && state.admin">
        <h2>ADMIN PAGE</h2>
        <!-- TODO keep conversation picker selected and refresh conversation -->
        <button @click="getMessages">Refresh</button>
        <button @click="goToPage('settings')">Settings</button>
        <div>
            <Conversation-Picker :convos="state.convos" @selection-changed="convoChanged"></Conversation-Picker>
            <main>
                <Conversation v-if="state.selectedConvo" :convo="state.selectedConvo" @reply="sendResponse"></Conversation>
            </main>
        </div>
    </template>

    <template v-if="state.currentPage === 'messages' && !state.admin">
        <h2>Messages</h2>
        <p>Hello {{state.name}}</p>
        <button @click="getMessages">Refresh</button>

        <!-- threads, email style -->
        <template v-for="convo in state.convos" :key="convo.id">
            <hr>
            <Conversation :convo="convo" @reply="sendResponse"></Conversation>
        </template>
    </template>

    <template v-if="state.currentPage === 'settings' && state.admin">
        <h2>Settings</h2>
        <button @click="goToPage('messages')">Back</button>

        <h3>Entry points</h3>
        <table>
            <tr v-for="ep in state.entrypoints">
                <td>{{ep}}</td>
                <td><button @click="deleteEntrypoint($event, ep)">Delete</button></td>
            </tr>
            <tr>
                <td><input type="text" placeholder="New entry point"
                           pattern="[a-z\d_-]+" required
                           v-model.trim="newEp"
                           @input="validateNewEntrypoint"
                           :disabled="state.waitingCreateEntrypoint"
                    ></td>
                <td><button @click="createEntrypoint(newEp)" :disabled="!state.newEntrypointValid || state.waitingCreateEntrypoint">Create</button></td>
            </tr>
        </table>
    </template>
</div>


<%- include("components/_conversation"); %>
<%- include("components/_conversation-picker"); %>

<script type="importmap">
    {
        "imports": {
        <% if (prod) { %>
            "vue": "/lib/vue.esm-browser.prod.js"
        <% } else { %>
            "vue": "/lib/vue.esm-browser.js"
        <% } %>
        }
    }
</script>

<script type="module">
    import { createApp } from "vue";
    import { getApp } from "/app.js";

    createApp(getApp(`<%= sid %>`)).mount('#app');
</script>



</body>
</html>
