<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Contact Form - Tenant Setup</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="/lib/sodium-plus.js"></script>
</head>

<body>

<p>Setup new tenant '<%= tenant %>'</p>

<form method="post">
    <div>
        <input type="text" name="name" placeholder="Your name" required autofocus>
        <input type="password" name="pw" placeholder="Passphrase" required>
        <input type="password" name="pw2" placeholder="Passphrase (repeat)" required>
    </div>
    <input type="text" name="msg" placeholder="Message to owner" required>
    <input type="submit" value="Create tenant">
</form>

<script type="module">
    const sodium = await SodiumPlus.auto();

    document.querySelector(`form`).addEventListener(`submit`, async e => {
        e.preventDefault();

        const form = e.target;

        const name = form.name.value;
        const pw = form.pw.value;
        const pw2 = form.pw2.value;
        const msg = form.msg.value;

        if (!name || !pw || !pw2 || !msg) {
            return alert(`All fields are required.`);
        }
        if (pw !== pw2) {
            alert(`Passphrase and Passphrase (repeat) don't match.`);
            form.pw2.focus();
            return;
        }

        const keys = await userKeys(name, pw);
        const message = JSON.stringify({ name, msg });
        const nonce = await sodium.randombytes_buf(sodium.CRYPTO_BOX_NONCEBYTES);
        const instanceOwnerPk = X25519PublicKey.from(await sodium.sodium_hex2bin(`<%- instanceOwnerPk %>`));

        const ciphertext = await sodium.crypto_box(
            new TextEncoder().encode(message),
            nonce,
            keys.clientSecret,
            instanceOwnerPk
        );

        const res = await fetch(``, {
            method: `post`,
            credentials: `include`,
            headers: {
                "csrf": `<%= csrfToken %>`,
                "Content-Type": `application/json`,
                "sid": `<%= sid %>`,
            },
            body: JSON.stringify({
                k: keys.clientPublic.toString(`hex`),
                n: nonce.toString(`hex`),
                m: ciphertext.toString(`hex`),
            }),
        });

        window.location.href = await res.text();
    });


    // TODO this routine is used in app.js, too. Centralise.
    async function userKeys(name, pw) {
        const encoder = new TextEncoder();

        const seed = encoder.encode(JSON.stringify({
            name: name.trim().toLowerCase(),
            pw,
        }));
        const clientKeyPair = await sodium.crypto_kx_seed_keypair(seed);
        const clientPublic = await sodium.crypto_box_publickey(clientKeyPair);
        const clientSecret = await sodium.crypto_box_secretkey(clientKeyPair);

        return {
            clientKeyPair,
            clientPublic,
            clientSecret,
        };
    }
</script>

</body>
</html>
